- You are an expert in TypeScript, Node.js, Next.js, App Router, React, Shadcn UI, and Tailwind and Framer Motion.- Code Style and Structure
- Write concise, technical TypeScript code with accurate examples.
- Use functional and declarative programming patterns; avoid classes.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, subcomponents, helpers, static content, types.- Naming Conventions
- All components should go in src/components and be named like new-component.tsx
- Use lowercase with dashes for directories (e.g., components/auth-wizard).
- Favor named exports for components.- TypeScript Usage
- Use TypeScript for all code; prefer interfaces over types.
- Avoid enums; use maps instead.
- Use functional components with TypeScript interfaces.- Syntax and Formatting
- Use the "function" keyword for pure functions.
- Avoid unnecessary curly braces in conditionals; use concise syntax for simple statements.
- Use declarative JSX.- UI and Styling
- Use Shadcn UI, and Tailwind for components and styling.
- Implement responsive design with Tailwind CSS; use a mobile-first approach.- Performance Optimization
- Minimize 'use client', 'useEffect', and 'setState'; favor React Server Components (RSC).
- Wrap client components in Suspense with fallback.
- Use dynamic loading for non-critical components.
- Optimize images: use WebP format, include size data, implement lazy loading.- Key Conventions
- Use 'nuqs' for URL search parameter state management.
- Optimize Web Vitals (LCP, CLS, FID).
- Limit 'use client': 
- Favor server components and Next.js SSR. 
- Use only for Web API access in small components. 
- Avoid for data fetching or state management.
- Follow Next.js docs for Data Fetching, Rendering, and Routing.
- While creating placeholder images as a part of your seed data, use https://placekitten.com/
- Place both the /app and /components folders under a /src directory. This organization offers several benefits: 
- It helps maintain a clean and organized project structure. 
- It allows for easier navigation and management of components and pages. 
- It adheres to common industry standards, making it easier for other developers to understand and contribute to the project. 
- It provides a clear separation between application logic (in /src/app) and UI components (in /src/components), improving code readability and reusability. 
- It simplifies the process of creating new pages and components, as you can easily find the corresponding files in the /src directory. 
- It makes the project more modular and easier to scale as the application grows. 
- It adheres to the principle of separation of concerns, where different aspects of the application are handled by different directories.
## Components Organization Within the /src/components folder, consider organizing components by type or feature:By Type: Group components like forms, buttons, layout elements, etc.By Feature: For larger applications, group components related to specific features or domains
packages/web_app/src/components/
├── /ui
│   ├── /button
│   │   └── button.tsx
│   ├── /modal
│   │   └── modal.tsx
│   ├── /card
│   │   └── card.tsx
│   └── /data-table
│       └── data-table.tsx
├── /forms
│   ├── /text-field
│   │   └── text-field.tsx
│   └── /select
│       └── select.tsx
├── /layout
│   ├── /navbar
│   │   └── navbar.tsx
│   └── /footer
│       └── footer.tsx
└── /features
    ├── /conferences
    │   ├── conference-card.tsx
    │   └── conference-list.tsx
    └── /auth
        ├── login-form.tsx
        └── signup-form.tsx

# Private components specific to pages
packages/web_app/src/app/(routes)/conferences/[id]/_components/
└── conference-details.tsx

# Shared utilities and hooks
packages/web_app/src/lib/
├── /hooks
└── /utils
This structure:
Follows the monorepo pattern with packages/web_app
Organizes reusable UI components under src/components/ui
Groups form-related components under src/components/forms
Places layout components under src/components/layout
Organizes feature-specific components under src/components/features
6. Uses _components folder within route directories for page-specific components
7. Keeps shared utilities and hooks in src/lib
Each component follows the kebab-case naming convention and includes its own .tsx file. This structure promotes reusability while maintaining clear organization based on component purpose and scope.

# COMMENTS
- Use the latest stable version of TypeScript, JavaScript, React, Node.js, Next.js App Router, Shaden UI, Tailwind CSS and you are familiar with the Latest features and best practices.
- You carefully provide accurate, factual, thoughtful answers, and are a genius at reasoning ai to chat, to generateCode StyLe and StructureNaming ConventionsTypeScript UsageUI and StylingPerformance OptimizationOther Rules need to follow:Don't be lazy, write all the code to implement features I ask for
- Make sure yo always include comments in your code to explain what the code is doing.